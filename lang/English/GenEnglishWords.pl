#!/usr/bin/perl

# This script helps populate the proteusData.db database with word shells from wordNet. (Word shells = words not yet defined on the slipstream.)
# It also creates a file called 'model/pr' which can be used to verify that all words load correctly in Proteus.
# Ensure that wordnet, sqlite3, perl DBD and perl WordNet::QueryData are installed.

use WordNet::QueryData;
use DBI;

my $wn = WordNet::QueryData->new("/usr/share/wordnet/");

# These are just examples of how WordNet::QueryData works in case they are needed later:

# print "Synset: ",   join(", ", $wn->querySense("cat#n#7", "syns")), "\n";       // All have the same meaning
# print "Hyponyms: ", join(", ", $wn->querySense("cat#n#1", "hypo")), "\n";
# print "Meronyms: ", join(", ", $wn->querySense("car#n#1", "mero")), "\n";       // Parts, members and substances of a car
# print "Holonyms: ", join(", ", $wn->querySense("car_seat#n#1", "holo")), "\n";  // Inverse of meronyms
# print "Parts of Speech: ", join(", ", $wn->querySense("run")), "\n";
# print "Senses: ", join(", ", $wn->querySense("run#v")), "\n";
# print "Forms: ", join(", ", $wn->validForms("lay down#v")), "\n";
# print "Noun count: ", scalar($wn->listAllWords("noun")), "\n";
# print "Antonyms: ", join(", ", $wn->queryWord("dark#n#1", "ants")), "\n";
# print "\nExperiment: ", join(", ", $wn->queryWord("organic#n#1", "domn")), "\n";

# frequency() tests
# print "FREQ of night:", $wn->frequency('night#n#1'), "\n";
# print "FREQ of epistemology:", $wn->frequency('epistemology#n#1'), "\n";

#exit;

my $dbfile="../proteusData.db";
my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile", "","", {RaiseError => 0, AutoCommit => 0, sqlite_unicode => 1});

open (OUTFILE, '>models.pr');

$count=0;
print "Transferring words...\n";
print OUTFILE "//Autogenerated model\n\n<% \n{\n";

exportLastNames();  exit;
exportFirstNames();

exportWordClass('noun', 'n');
exportWordClass('verb', 'v');
exportWordClass('adj',  'a');
exportWordClass('adv',  'r');

print OUTFILE "\n}\n%>\n";
close (OUTFILE);
$rc  = $dbh->commit     or die $dbh->errstr;


open (OUTFILE, '>EngNames.pr');

$count=0;
print "Transferring Names...\n";
print OUTFILE "//Autogenerated model\n\n<% \n{\n";

exportLastNames();
exportFirstNames();

print OUTFILE "\n}\n%>\n";
close (OUTFILE);
$rc  = $dbh->commit     or die $dbh->errstr;

#$cursor->finish;
$dbh->disconnect;

exit;

sub exportLastNames(){
    print "EXPORTING LAST NAMES\n";
    $queryStr=qq(insert into models (sourceID, attrs, proteus) values ("default", "lastName", "{...}"));
    $dbh->do($queryStr); if ($dbh->err()) { print "\nQueryStr:[$queryStr]\n"; die "($count)-$DBI::errstr\n"; }
    $LastNameRowID = $dbh->sqlite_last_insert_rowid();

    my $file = 'surnames.csv';
    my $count=0;
    open(my $NAMES, '<', $file) or die "Can't read file '$file' [$!]\n";
    while (my $line = <$NAMES>) {
        if ($count++){
            chomp $line;
            my @fields = split(/,/, $line);
            my $name=$fields[0];
            if(($count % 100) == 0) { print "$count: $name\n";}
            $queryStr=qq(insert into words (sourceID, locale, word, senseID, pos, modelID) values ("USSSN", "en", "$name", "#n#1", "noun", $LastNameRowID));
            $dbh->do($queryStr); if ($dbh->err()) { print "\nQueryStr:[$queryStr]\n"; die "($count)-$DBI::errstr\n"; }
        }
    }
}

sub exportFirstNames(){

    $queryStr=qq(insert into words (sourceID, locale, word, senseID, pos, gloss, modelID) values ("wordNet", "en", "$wordPart", "$senseID", "$wordClass", "$gloss", $modelRowID));
    $dbh->do($queryStr); if ($dbh->err()) { print "\nQueryStr:[$queryStr]\n"; die "($count)-$DBI::errstr\n"; }
}


sub exportWordClass(){
    my ($wordClass, $classID) = @_;
    print "############################# EXPORTING $wordClass ($classID)\n";
    my %usedWords=();
    my @Words = sort $wn->listAllWords($wordClass);

    $queryStr=qq(insert into models (sourceID, attrs, proteus) values ("wordNet", "default", "{...}"));
    $dbh->do($queryStr); if ($dbh->err()) { print "\nQueryStr:[$queryStr]\n"; die "($count)-$DBI::errstr\n"; }
    $DefaultModelRowID = $dbh->sqlite_last_insert_rowid();

    foreach $word (@Words) {
        $_ = $word; if(/(\d+| '|_'|-')/) {print "NUM: $word ($_)\n";}
        else {
            foreach $sense ($wn->querySense("$word#$classID")){
             $wordNorm=$sense; $wordNorm =~ s/[_\-\.\/]/ /g;  $wordNorm =~ s/  / /g; $wordNorm =~ s/ #/#/g; $wordNorm =~ s/^'//g;
             $wordPart=$wordNorm; $wordPart =~ s/(#\w#\d+)//g; my $senseID=$1;
             if(exists $usedWords{$wordNorm}) {print "DUPLICATE: $wordNorm.\n";}
                else{
                    $usedWords{$wordNorm}="Y";
                    $freq=$wn->frequency($sense);
                    $gloss=join(", ", $wn->querySense($sense, 'glos'));
                    $gloss =~ s/['=&]/ /g;  $gloss =~ s/"/'/g;
                    $sense =~ s/[ _]/-/g;

                    $proteusModel="{...}";
                    if($wordClass eq "noun") {$proteusModel='{' . join(", ", $wn->querySense($sense, "mero")) .'}';}
                    #elsif($wordClass eq "verb") {}
                    #elsif($wordClass eq "adj") {}
                    #elsif($wordClass eq "adv") {}
                    #elsif($wordClass eq "func") {}
                   # $proteusModel =~ s/[-_]/ /g;
                    if($proteusModel eq "{}"){$proteusModel="{...}";}

                    if((++$count % 100) == 0) { print $count,"\t$wordPart:$classID ($freq)\t   $senseID  = $proteusModel\n";}

                    print OUTFILE "   &$wordNorm \t%word:$classID \t%gloss:<$gloss> = $proteusModel\n";

                    if($proteusModel eq "{...}"){$modelRowID = $DefaultModelRowID; print ".";}
                    else{
                        $queryStr=qq(insert into models (sourceID, attrs, proteus) values ("wordNet", "", "$proteusModel"));
                        $dbh->do($queryStr); if ($dbh->err()) { print "\nQueryStr:[$queryStr]\n"; die "($count)-$DBI::errstr\n"; }
                        $modelRowID = $dbh->sqlite_last_insert_rowid();
                        print "!";
                    }

                    $wordPart =~ s/'/''/g; $wordPart =~ s/ /-/g;
                    $queryStr=qq(insert into words (sourceID, locale, word, senseID, pos, gloss, modelID) values ("wordNet", "en", "$wordPart", "$senseID", "$wordClass", "$gloss", $modelRowID));
                    $dbh->do($queryStr); if ($dbh->err()) { print "\nQueryStr:[$queryStr]\n"; die "($count)-$DBI::errstr\n"; }

                }
            }
        }
    }
}
