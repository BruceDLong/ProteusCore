#!/usr/bin/perl

# This script helps populate the proteusData.db database with word shells from wordNet. (Word shells = words not yet defined on the slipstream.)
# It also creates a file called 'model/pr' which can be used to verify that all words load correctly in Proteus.
# Ensure that wordnet, sqlite3, perl DBD and perl WordNet::QueryData are installed.

use WordNet::QueryData;
use DBI;

my $dbfile="../proteusData.db";
my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile", "","", {RaiseError => 0, AutoCommit => 0, sqlite_unicode => 1});
#$dbh->{unicode} = 1;

#my $cursor;
#my @rec;

 my $wn = WordNet::QueryData->new("/usr/share/wordnet/");

# These are just examples of how WordNet::QueryData works in case they are needed later:

# print "Synset: ", join(", ", $wn->querySense("cat#n#7", "syns")), "\n";
# print "Hyponyms: ", join(", ", $wn->querySense("cat#n#1", "hypo")), "\n";
# print "Parts of Speech: ", join(", ", $wn->querySense("run")), "\n";
# print "Senses: ", join(", ", $wn->querySense("run#v")), "\n";
# print "Forms: ", join(", ", $wn->validForms("lay down#v")), "\n";
# print "Noun count: ", scalar($wn->listAllWords("noun")), "\n";
# print "Antonyms: ", join(", ", $wn->queryWord("dark#n#1", "ants")), "\n";
# print "\nExperiment: ", join(", ", $wn->queryWord("organic#n#1", "domn")), "\n";

# frequency() tests
# print "FREQ of night:", $wn->frequency('night#n#1'), "\n";
# print "FREQ of love:", $wn->frequency('epistemology#n#1'), "\n";

#exit;

open (OUTFILE, '>models.pr');

$count=0;
print "Transferring words...\n";
print OUTFILE "//Autogenerated model\n\n<% \n{\n";

exportWordClass('noun', 'n');
exportWordClass('verb', 'v');
exportWordClass('adj',  'a');
exportWordClass('adv',  'r');

print OUTFILE "\n}\n%>\n";
close (OUTFILE);
$rc  = $dbh->commit     or die $dbh->errstr;
#$cursor->finish;
$dbh->disconnect;

exit;

sub exportWordClass(){
    my ($wordClass, $classID) = @_;
    print "############################# EXPORTING $wordClass ($classID)\n";
    my %usedWords=();
    my @Words = sort $wn->listAllWords($wordClass);
    foreach $word (@Words) {
        $_ = $word; if(/(\d+| '|_'|-')/) {print "NUM: $word ($_)\n";}
        else {
            foreach $sense ($wn->querySense("$word#$classID")){
             $wordNorm=$sense; $wordNorm =~ s/[_\-\.\/]/ /g;  $wordNorm =~ s/  / /g; $wordNorm =~ s/ #/#/g; $wordNorm =~ s/^'//g;
             $wordPart=$wordNorm; $wordPart =~ s/(#\w#\d+)//g; my $senseID=$1;
             if(exists $usedWords{$wordNorm}) {print "DUPLICATE: $wordNorm.\n";}
                else{
                    $usedWords{$wordNorm}="Y";
                    $freq=$wn->frequency($sense);
                    $gloss=join(", ", $wn->querySense($sense, 'glos'));
                    $gloss =~ s/['=&]/ /g;  $gloss =~ s/"/'/g;
                    $sense =~ s/[ _]/-/g;

                    if((++$count % 1000) == 0) { print $count,"\t$wordPart:$classID ($freq)\t   $senseID \n";}
                    print OUTFILE "   &$wordNorm \t%word:$classID \t%gloss:<$gloss> = {\"$sense\"}\n";

                    $wordPart =~ s/'/''/g; $wordPart =~ s/ /-/g;
                    $queryStr=qq(insert into wordShells (sourceID, locale, word, senseID, pos, gloss) values ("wordNet", "en", "$wordPart", "$senseID", "$wordClass", "$gloss"));
                    $dbh->do($queryStr);
                    if ($dbh->err()) {
                        print "\nQueryStr:[$queryStr]\n";
                        die "($count)-$DBI::errstr\n";
                    }

                }
            }
        }
    }
}
